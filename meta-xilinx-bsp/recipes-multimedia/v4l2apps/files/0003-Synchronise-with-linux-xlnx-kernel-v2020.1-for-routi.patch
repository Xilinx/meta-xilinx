From d1fd58d819a25cb6983833084b0d2dd72a57e19a Mon Sep 17 00:00:00 2001
From: Adrian Fiergolski <adrian.fiergolski@fastree3d.com>
Date: Thu, 28 Jan 2021 17:17:09 +0100
Subject: [PATCH 3/3] Synchronise with linux-xlnx kernel v2020.1 for routing
 operations.

Signed-off-by: Adrian Fiergolski <adrian.fiergolski@fastree3d.com>
---
 include/linux/v4l2-subdev.h         | 30 ++++------------
 utils/v4l2-ctl/v4l2-ctl-routing.cpp | 53 +++--------------------------
 2 files changed, 10 insertions(+), 73 deletions(-)

diff --git a/include/linux/v4l2-subdev.h b/include/linux/v4l2-subdev.h
index af069bf..440afc0 100644
--- a/include/linux/v4l2-subdev.h
+++ b/include/linux/v4l2-subdev.h
@@ -155,42 +155,24 @@ struct v4l2_subdev_selection {
 	__u32 reserved[8];
 };
 
-#define V4L2_SUBDEV_ROUTE_FL_ACTIVE	(1 << 0)
-#define V4L2_SUBDEV_ROUTE_FL_IMMUTABLE	(1 << 1)
-
 /**
  * struct v4l2_subdev_route - A signal route inside a subdev
- * @sink_pad: the sink pad
- * @sink_stream: the sink stream
- * @source_pad: the source pad
- * @source_stream: the source stream
- * @flags: route flags:
- *
- *	V4L2_SUBDEV_ROUTE_FL_ACTIVE: Is the stream in use or not? An
- *	active stream will start when streaming is enabled on a video
- *	node. Set by the user.
- *
- *	V4L2_SUBDEV_ROUTE_FL_IMMUTABLE: Is the stream immutable, i.e.
- *	can it be activated and inactivated? Set by the driver.
+ * @sink: the sink pad
+ * @source: the source pad
  */
 struct v4l2_subdev_route {
-	__u32 sink_pad;
-	__u32 sink_stream;
-	__u32 source_pad;
-	__u32 source_stream;
-	__u32 flags;
-	__u32 reserved[5];
+	__u32 sink;
+	__u32 source;
 };
 
 /**
  * struct v4l2_subdev_routing - Routing information
- * @routes: the routes array
  * @num_routes: the total number of routes in the routes array
+ * @routes: the routes array
  */
 struct v4l2_subdev_routing {
-	struct v4l2_subdev_route *routes;
 	__u32 num_routes;
-	__u32 reserved[5];
+	struct v4l2_subdev_route *routes;
 };
 
 /* Backwards compatibility define --- to be removed */
diff --git a/utils/v4l2-ctl/v4l2-ctl-routing.cpp b/utils/v4l2-ctl/v4l2-ctl-routing.cpp
index 55a2e44..333f60e 100644
--- a/utils/v4l2-ctl/v4l2-ctl-routing.cpp
+++ b/utils/v4l2-ctl/v4l2-ctl-routing.cpp
@@ -23,48 +23,12 @@
 struct v4l2_subdev_routing routing;
 struct v4l2_subdev_route routes[NUM_ROUTES_MAX];
 
-struct flag_name {
-	__u32 flag;
-	const char *name;
-};
-
-static void print_flags(const struct flag_name *flag_names, unsigned int num_entries, __u32 flags)
-{
-	bool first = true;
-	unsigned int i;
-
-	for (i = 0; i < num_entries; i++) {
-		if (!(flags & flag_names[i].flag))
-			continue;
-		if (!first)
-			printf(",");
-		printf("%s", flag_names[i].name);
-		flags &= ~flag_names[i].flag;
-		first = false;
-	}
-
-	if (flags) {
-		if (!first)
-			printf(",");
-		printf("0x%x", flags);
-	}
-}
-
 static void print_routes(const struct v4l2_subdev_routing *r)
 {
 	unsigned int i;
 
-	static const struct flag_name route_flags[] = {
-		{ V4L2_SUBDEV_ROUTE_FL_ACTIVE, "ENABLED" },
-		{ V4L2_SUBDEV_ROUTE_FL_IMMUTABLE, "IMMUTABLE" },
-	};
-
 	for (i = 0; i < r->num_routes; i++) {
-		printf("%d/%d -> %d/%d [",
-		       r->routes[i].sink_pad, r->routes[i].sink_stream,
-		       r->routes[i].source_pad, r->routes[i].source_stream);
-		print_flags(route_flags, ARRAY_SIZE(route_flags), r->routes[i].flags);
-		printf("]\n");
+		printf("%u -> %u\n", r->routes[i].sink, r->routes[i].source);
 	}
 }
 
@@ -77,15 +41,12 @@ void routing_usage(void)
 	       "Routes are defined as\n"
 	       "	routes		= route { ',' route } ;\n"
 	       "	route		= sink '->' source '[' flags ']' ;\n"
-	       "	sink		= sink-pad '/' sink-stream ;\n"
-	       "	source		= source-pad '/' source-stream ;\n"
+	       "	sink		= sink-pad ;\n"
+	       "	source		= source-pad ;\n"
 	       "\n"
 	       "where the fields are\n"
 	       "	sink-pad	= Pad numeric identifier for sink\n"
-	       "	sink-stream	= Stream numeric identifier for sink\n"
 	       "	source-pad	= Pad numeric identifier for source\n"
-	       "	source-stream	= Stream numeric identifier for source\n"
-	       "	flags		= Route flags (0: inactive, 1: active)\n"
 	       );
 }
 
@@ -110,19 +71,13 @@ void routing_cmd(int ch, char *optarg)
 		r = routing.routes;
 		ref = end = strdup(optarg);
 		while ((tok = strsep(&end, ",")) != NULL) {
-			if (sscanf(tok, "%u/%u -> %u/%u [%u]",
-				   &r->sink_pad, &r->sink_stream,
-				   &r->source_pad, &r->source_stream,
-				   &flags) != 5 || (flags != 0 && flags != 1)) {
+			if (sscanf(tok, "%u -> %u", &r->sink, &r->source) != 2) {
 				free(ref);
 				fprintf(stderr, "Invalid route information specified\n");
 				routing_usage();
 				exit(1);
 			}
 
-			if (flags == 1)
-				r->flags = V4L2_SUBDEV_ROUTE_FL_ACTIVE;
-
 			r++;
 			routing.num_routes++;
 		}
-- 
2.30.0

